---
title: Inference with Raster Spatial Data with R
author: 'Bas Machielsen'
date: '2023-05-03'
slug: []
excerpt: An example demonstration of working with raster data in R. 
categories: []
tags: []
---

## Introduction

In this blog post, I want to demonstrate how to work with spatial raster data in R. I already have a couple of tutorials on vector data, but in this blog post, I want to focus exclusively on raster data. I'll be replicating a paper about Roman Roads by Dalgaard et al. (2021), which attempts to identify the persistent influence of Roman roads (built in the Roman empire) on later economic development. The basic identification strategy they use is a controlled approach, where the unit of analysis is a 1x1 longitude times latitude area. They compute the Roman road density for each area that falls within the boundaries of the former Roman empire , defined as the % of surface of the pixel covered by a road. In addition, as outcome variables, they compute the nightlight (and population) density for the same areas and related them to each other, subject to many controls. In this tutorial I'll only focus on the basic set-up, and conclude with a small (uncontrolled) analysis, and compare the coefficient magnitude to theirs. 


## Importing the Data

First, I load the necessary libraries:


```
## ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
## ✔ dplyr     1.1.2     ✔ readr     2.1.4
## ✔ forcats   1.0.0     ✔ stringr   1.5.0
## ✔ ggplot2   3.4.1     ✔ tibble    3.2.1
## ✔ lubridate 1.9.2     ✔ tidyr     1.3.0
## ✔ purrr     1.0.1     
## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
## ✖ dplyr::filter() masks stats::filter()
## ✖ dplyr::lag()    masks stats::lag()
## ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors
## Linking to GEOS 3.10.2, GDAL 3.4.1, PROJ 8.2.1; sf_use_s2() is TRUE
## 
## Loading required package: sp
## 
## 
## Attaching package: 'raster'
## 
## 
## The following object is masked from 'package:dplyr':
## 
##     select
## 
## 
## Please note that rgdal will be retired during 2023,
## plan transition to sf/stars/terra functions using GDAL and PROJ
## at your earliest convenience.
## See https://r-spatial.org/r/2022/04/12/evolution.html and https://github.com/r-spatial/evolution
## rgdal: version: 1.6-5, (SVN revision 1199)
## Geospatial Data Abstraction Library extensions to R successfully loaded
## Loaded GDAL runtime: GDAL 3.4.1, released 2021/12/27
## Path to GDAL shared files: /usr/share/gdal
## GDAL binary built with GEOS: TRUE 
## Loaded PROJ runtime: Rel. 8.2.1, January 1st, 2022, [PJ_VERSION: 821]
## Path to PROJ shared files: /home/bas/.local/share/proj:/usr/share/proj
## PROJ CDN enabled: FALSE
## Linking to sp version:1.6-0
## To mute warnings of possible GDAL/OSR exportToProj4() degradation,
## use options("rgdal_show_exportToProj4_warnings"="none") before loading sp or rgdal.
## 
## terra 1.7.18
## 
## 
## Attaching package: 'terra'
## 
## 
## The following object is masked from 'package:rgdal':
## 
##     project
## 
## 
## The following object is masked from 'package:tidyr':
## 
##     extract
```


## Data Sources

I'll also be using a variety of data sources. Here, I want to give a short overview of the data sources used in the original paper, and alternative data sources, as well as R packages that make it easy to access these data:

**Dependent variables**:

- [Gridded Population of the World](https://sedac.ciesin.columbia.edu/data/collection/gpw-v4)
- [NOAA Nightlights](https://github.com/walshc/nightlights)
- [Alternative Nightlights package](https://github.com/JakobMie/nightlightstats)
- [Website with Graphical User Interface](https://eogdata.mines.edu/products/vnl/#annual_v2)
- [The Oxford Roman Economy Project](http://oxrep.classics.ox.ac.uk/databases/mines_database/): Data on Settlements in 500AD
- `osmdata` R package [vignette](https://cran.r-project.org/web/packages/osmdata/vignettes/osmdata.html): Data on contemporary roads

**Miscellaneous data**:

- [Digital Atlas of the Roman Empire](https://imperium.ahlfeldt.se/): used to retrieve _Oppidum_ and Roman settlements through an API Interface
- [Other Roman Empire Datasets](https://projectmercury.eu/datasets/)

**Independent variables**:

- **Major Roman Roads**: From the `cawd` package:
- [The Oxford Roman Economy Project](http://oxrep.classics.ox.ac.uk/databases/mines_database/): Data on Roman Mines
- [Terrain ruggedness](https://diegopuga.org/data/rugged/)
- `elevatr` R package [Vignette](https://cran.r-project.org/web/packages/elevatr/vignettes/introduction_to_elevatr.html#Get_Raster_Elevation_Data): Elevation data through R
- [Caloric Suitability Index](https://ozak.github.io/Caloric-Suitability-Index/): 
- [Agricultural Suitability](https://cran.r-project.org/web/packages/ALUES/index.html): Agricultural Land Use Evaluation System
- [The `climateR` package](https://rpubs.com/ials2un/trrclmt): Package with access to climate data
- [The `climatrends` package](https://agrdatasci.github.io/climatrends/): Alternative package with access to climate data


## Get the roads and the borders

The borders can be found on [this repository](https://github.com/AWMC/geodata/blob/master/Cultural-Data/political_shading/roman_empire_ce_117_extent/roman_empire_ce_117_extent.geojson). I'll be using only a small subset of the data to keep down computational and memory load. 




```r
ggplot() + geom_sf(data=borders) + 
  geom_sf(data=roads, color='blue')
```

<img src="index_files/figure-html/plot_borders-1.png" width="672" />

## Import and filter nightlight density

- The following has to be run only once to recreate the nightlights data. 


```r
# load the raster dataset
raster_data <- raster("./nightlights/VNL_v21_npp_2014_global_vcmslcfg_c202205302300.average_masked.dat.tif")
# Crop the dataset:
raster_data <- crop(x = raster_data, y = borders)
# Or
#raster_data <- crop(x = raster_data, y = extent(borders))

# Limit the max light intensity
raster_data <- raster_data |> clamp(upper = 50)
# Crop the data:
#raster_data <- raster::mask(raster_data, 
#                                 mask = as_Spatial(st_bbox(borders) |> st_as_sfc()))
# Or:
raster_data <- raster::mask(raster_data ,mask=borders)

# Write output
writeRaster(raster_data, "./nightlights/nightlights_re.tif", overwrite=TRUE)
```

We can now use the imported file:





























